{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/TongSii/hds5210-2025/blob/main/midterm/midterm_2025.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e584j8i53IL2"
   },
   "source": [
    "# HDS5210-2022 Midterm\n",
    "\n",
    "In the midterm, you're going to use all the programming and data management skills you've developed so far to build a risk calculator that pretends to be integrated with a clinical registry.  You'll compute the PRIEST COVID-19 Clinical Severity Score for a series of patients and, based on their risk of an adverse outcome, query a REST web service to find a hospital to transfer them to. The end result of your work will be a list of instructions on where each patient should be discharged given their risk and various characteristics of the patient.\n",
    "\n",
    "Each step in the midterm will build up to form your complete solution.\n",
    "\n",
    "**Make sure you write good docstrings and doctests along the way!!**\n",
    "\n",
    "**The midterm is due at 9 AM CST on Thursday, October 16th. And the recording is due 9AM CST on Wednesday, October 22nd **\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4O5g7UdE3IL3"
   },
   "source": [
    "## Step 1: Calculate PRIEST Clinical Severity Score\n",
    "\n",
    "This scoring algorithm can be found [here on the MDCalc website](https://www.mdcalc.com/priest-covid-19-clinical-severity-score#evidence).  \n",
    "\n",
    "1. You will need to write a function called **priest()** with the following input parameters.  \n",
    " * Sex (Gender assigned at birth)\n",
    " * Age in years\n",
    " * Respiratory rate in breaths per minute\n",
    " * Oxygen saturation as a percent between 0 and 1\n",
    " * Heart rate in beats per minute\n",
    " * Systolic BP in mmHg\n",
    " * Temperature in degrees C\n",
    " * Alertness as a string description\n",
    " * Inspired Oxygen as as string description\n",
    " * Performance Status as a string description\n",
    "2. The function will need to follow the algorithm provided on the MDCalc website to compute a risk percentage that should be returned as a numeric value between 0 and 1.\n",
    "3. Be sure to use docstring documentation and at least three built-in docstring test cases.\n",
    "4. Assume that the input values that are strings could be any combination of upper or lower case. For example: 'male', 'Male', 'MALE', 'MalE' should all be interpretted by your code as male.\n",
    "5. If any of the inputs are invalid (for example a sex value that is not recognizable as male or female) your code should return None.\n",
    "\n",
    "NOTES:\n",
    "1. In the final step there is a table that translates from **PRIEST Score** to **30-day probability of an outcome** but the last two probabilities are shown as ranges (59-88% and >99%).  Our code needs to output a single number, however. For our code, use the following rule:\n",
    " * If PRIEST score is between 17 and 25, the probability you return should be 0.59\n",
    " * If PRIEST score is greater than or equal to 26, the probability you return should be 0.99\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "dLpkMoUB3IL4"
   },
   "outputs": [],
   "source": [
    "def priest(p_sex, p_age, p_resp_rate, p_o2_sat, p_heart, p_bp, p_temp, p_alert_status, p_ins_o2, p_status):\n",
    "\n",
    "    '''\n",
    "\n",
    "        This function computes the risk percentage, represented as the \"priest score\", for assessing the severity of COVID-19 clinical symptoms. It takes multiple input parameters such as gender, age, respiratory rate, oxygen saturation, heart rate, blood pressure, body temperature, alertness, inspired oxygen support, and performance status.\n",
    "\n",
    "        The output of the function is a risk percentage as a decimal value within the range of 0 to 1. If any of the input parameters are invalid, the function will return a None value.\n",
    "\n",
    "\n",
    "        Test Cases -->\n",
    "\n",
    "        >>> priest(\"male\",18,20.0,94,105.0,115.0,35.4,\"ALERT\",\"air\",\"unrestricted normal activity\")\n",
    "        0.03\n",
    "\n",
    "        >>> priest(\"MALE\",21,22.0,96,50.0,115.0,38.1,\"ALERT\",\"AIR\",\"limited strenuous activity, can do light activity\")\n",
    "        0.15\n",
    "\n",
    "        >>> priest(\"FEMALE\",18,22.0,96,50.0,115.0,38.1,\"ALERT\",\"AIR\",\"limited strenuous activity, can do light activity\")\n",
    "        0.09\n",
    "\n",
    "    '''\n",
    "\n",
    "\n",
    "\n",
    "    # Initialize the p_count to 0\n",
    "    p_count = 0\n",
    "\n",
    "\n",
    "\n",
    "    # Convert string variable to lowercase\n",
    "    p_sex = p_sex.lower()\n",
    "    p_alert_status = p_alert_status.lower()\n",
    "    p_ins_o2 = p_ins_o2.lower()\n",
    "    p_status = p_status.lower()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # Check for correct input\n",
    "    if p_sex not in ('male', 'female'):\n",
    "        return None\n",
    "\n",
    "    if p_alert_status not in ('alert', 'confused or not alert'):\n",
    "        return None\n",
    "\n",
    "    if p_ins_o2 not in ('air', 'supplemental oxygen'):\n",
    "        return None\n",
    "\n",
    "    if p_status not in ('unrestricted normal activity', 'limited strenuous activity, can do light activity', 'limited activity, can self-care', 'limited self-care', 'bed/chair bound, no self-care'):\n",
    "        return None\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # compute p_count\n",
    "\n",
    "    # update the value of p_count for p_sex\n",
    "    if(p_sex == 'male'):\n",
    "        p_count +=1\n",
    "\n",
    "\n",
    "    # update the value of p_count for p_age\n",
    "    if(p_age >= 50 and p_age <= 65):\n",
    "        p_count += 2\n",
    "    elif(p_age >= 66 and p_age <= 80):\n",
    "        p_count += 3\n",
    "    elif(p_age > 80):\n",
    "        p_count += 4\n",
    "\n",
    "\n",
    "    # update the value of p_count for respiratory rate\n",
    "    if(p_resp_rate < 9):\n",
    "        p_count += 3\n",
    "    elif(p_resp_rate >= 9 and p_resp_rate <= 11):\n",
    "        p_count += 1\n",
    "    elif(p_resp_rate >= 12 and p_resp_rate <= 20):\n",
    "        p_count += 0\n",
    "    elif(p_resp_rate >= 21 and p_resp_rate <= 24):\n",
    "        p_count += 2\n",
    "    elif(p_resp_rate > 24):\n",
    "        p_count += 3\n",
    "\n",
    "\n",
    "    # update the value of p_count for oxygen saturation\n",
    "    if(p_o2_sat > 95):\n",
    "        p_count += 0\n",
    "    elif(p_o2_sat >= 94 and p_o2_sat <= 95):\n",
    "        p_count += 1\n",
    "    elif(p_o2_sat >= 92 and p_o2_sat <= 93):\n",
    "        p_count += 2\n",
    "    elif(p_o2_sat < 92):\n",
    "        p_count += 3\n",
    "\n",
    "\n",
    "    # update the value of p_count for p_heart rate\n",
    "    if(p_heart < 41):\n",
    "        p_count += 3\n",
    "    elif(p_heart >= 41 and p_heart <= 50):\n",
    "        p_count += 1\n",
    "    elif(p_heart >= 51 and p_heart <= 90):\n",
    "        p_count += 0\n",
    "    elif(p_heart >= 91 and p_heart <= 110):\n",
    "        p_count += 1\n",
    "    elif(p_heart >= 111 and p_heart <= 130):\n",
    "        p_count += 2\n",
    "    elif(p_heart > 130):\n",
    "        p_count += 3\n",
    "\n",
    "\n",
    "    # p_count for systolic blood pressure\n",
    "    if(p_bp < 91):\n",
    "        p_count += 3\n",
    "    elif(p_bp >= 91 and p_bp <= 100):\n",
    "        p_count += 2\n",
    "    elif(p_bp >= 101 and p_bp <= 110):\n",
    "        p_count += 1\n",
    "    elif(p_bp >= 111 and p_bp <= 219):\n",
    "        p_count += 0\n",
    "    elif( p_bp > 219):\n",
    "        p_count += 3\n",
    "\n",
    "\n",
    "    # update the value of p_count for body p_temp\n",
    "    if(p_temp < 35.1):\n",
    "        p_count += 3\n",
    "    elif(p_temp >= 35.1 and p_temp <= 36):\n",
    "        p_count += 1\n",
    "    elif(p_temp >= 36.1 and p_temp <= 38):\n",
    "        p_count += 0\n",
    "    elif(p_temp >= 38.1 and p_temp <= 39):\n",
    "        p_count += 1\n",
    "    elif( p_temp > 39):\n",
    "        p_count += 2\n",
    "\n",
    "\n",
    "    # update the value of p_count for p_alert_status\n",
    "    if(p_alert_status == \"alert\"):\n",
    "        p_count += 0\n",
    "    elif(p_alert_status == \"confused or not alert\"):\n",
    "        p_count += 3\n",
    "\n",
    "\n",
    "    # update the value of p_count for p_ins_o2\n",
    "    if(p_ins_o2 == \"air\"):\n",
    "        p_count += 0\n",
    "    elif(p_ins_o2 == \"supplemental oxygen\"):\n",
    "        p_count += 2\n",
    "\n",
    "\n",
    "    # update the value of p_count for p_status\n",
    "    if(p_status ==\"unrestricted normal activity\"):\n",
    "        p_count += 0\n",
    "    elif(p_status ==\"limited strenuous activity, can do light activity\"):\n",
    "        p_count += 1\n",
    "    elif(p_status==\"limited activity, can self-care\"):\n",
    "        p_count += 2\n",
    "    elif(p_status==\"limited self-care\"):\n",
    "        p_count += 3\n",
    "    elif(p_status==\"bed/chair bound, no self-care\"):\n",
    "        p_count += 4\n",
    "\n",
    "\n",
    "    # compute the PRIEST SCORE\n",
    "    priest_output = 0\n",
    "\n",
    "    if(p_count == 0 or p_count == 1):\n",
    "        priest_output=0.01\n",
    "    elif(p_count == 2 or p_count == 3):\n",
    "        priest_output=0.02\n",
    "    elif(p_count==4):\n",
    "        priest_output=0.03\n",
    "    elif(p_count==5):\n",
    "        priest_output=0.09\n",
    "    elif(p_count==6):\n",
    "        priest_output=0.15\n",
    "    elif(p_count==7):\n",
    "        priest_output=0.18\n",
    "    elif(p_count==8):\n",
    "        priest_output=0.22\n",
    "    elif(p_count==9):\n",
    "        priest_output=0.26\n",
    "    elif(p_count==10):\n",
    "        priest_output=0.29\n",
    "    elif(p_count==11):\n",
    "        priest_output=0.34\n",
    "    elif(p_count==12):\n",
    "        priest_output=0.38\n",
    "    elif(p_count==13):\n",
    "        priest_output=0.46\n",
    "    elif(p_count==14):\n",
    "        priest_output=0.47\n",
    "    elif(p_count==15):\n",
    "        priest_output=0.49\n",
    "    elif(p_count==16):\n",
    "        priest_output=0.55\n",
    "    elif(p_count>=17 and p_count<=25):\n",
    "        priest_output=0.59\n",
    "    elif(p_count>=26):\n",
    "        priest_output=0.99\n",
    "\n",
    "    return priest_output\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "gwg6bvyF3IL4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finding tests in NoName\n",
      "Trying:\n",
      "    priest(\"male\",18,20.0,94,105.0,115.0,35.4,\"ALERT\",\"air\",\"unrestricted normal activity\")\n",
      "Expecting:\n",
      "    0.03\n",
      "ok\n",
      "Trying:\n",
      "    priest(\"MALE\",21,22.0,96,50.0,115.0,38.1,\"ALERT\",\"AIR\",\"limited strenuous activity, can do light activity\")\n",
      "Expecting:\n",
      "    0.15\n",
      "ok\n",
      "Trying:\n",
      "    priest(\"FEMALE\",18,22.0,96,50.0,115.0,38.1,\"ALERT\",\"AIR\",\"limited strenuous activity, can do light activity\")\n",
      "Expecting:\n",
      "    0.09\n",
      "ok\n"
     ]
    }
   ],
   "source": [
    "import doctest\n",
    "doctest.run_docstring_examples(priest, globals(),verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eDUM9Pc73IL4"
   },
   "source": [
    "## Part 2: Find a hospital ( demonstrate)\n",
    "\n",
    "Now that you’ve calculated the patient’s risk of an adverse outcome, the next step is to determine where to send the patient for care. These decisions are based on the patient’s age group (pediatric, adult, geriatric), sex, and risk percentage.\n",
    "And the information is offered in the file gotten from the following link:\n",
    "https://drive.google.com/file/d/1miDZnXEMD1EMZ4hX5wNloTiHHUXViG3c/view?usp=sharing\n",
    "1. Your job is to write a function called **find_hospital()** that takes age, sex, and risk as parameters.\n",
    "2. Then your function will need to interpret the JSON it gets and return just the name of the hospital. If anything fails, return None\n",
    "**NOTE**:Include a good docstring with at least three test cases.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "iPPil2TkMfXb"
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "\n",
    "def find_hospital(p_age, p_sex, priest_score):\n",
    "\n",
    "    '''\n",
    "\n",
    "        This function takes \"patient's age, gender, and priest score\" as inputs and returns the name of the hospital as the output.\n",
    "\n",
    "        >>> find_hospital(18,'MALE',0.03)\n",
    "        'Southwest Hospital and Medical Center'\n",
    "\n",
    "        >>> find_hospital(48,'female',0.46)\n",
    "        'Emory Dunwoody Medical Center'\n",
    "\n",
    "        >>> find_hospital(21,'MALE',0.15)\n",
    "        'Southwest Hospital and Medical Center'\n",
    "\n",
    "    '''\n",
    "\n",
    "    try:\n",
    "\n",
    "        #gender to lowercase\n",
    "        p_sex = p_sex.lower()\n",
    "\n",
    "        p_age = int(p_age)\n",
    "\n",
    "        url = f'https://oumdj6oci2.execute-api.us-east-1.amazonaws.com/prd/?age={p_age}&sex={p_sex}&risk_pct={priest_score}'\n",
    "\n",
    "        response = requests.get(url)\n",
    "\n",
    "        if response.status_code == 200:\n",
    "\n",
    "            content = response.content\n",
    "\n",
    "            d_content = content.decode('utf-8')\n",
    "\n",
    "            d_json = json.loads(d_content)\n",
    "\n",
    "            output = d_json['hospital']\n",
    "\n",
    "            return output\n",
    "\n",
    "    except:\n",
    "\n",
    "        return None\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "zR5HgPnl3IL4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finding tests in NoName\n",
      "Trying:\n",
      "    find_hospital(18,'MALE',0.03)\n",
      "Expecting:\n",
      "    'Southwest Hospital and Medical Center'\n",
      "**********************************************************************\n",
      "File \"__main__\", line 10, in NoName\n",
      "Failed example:\n",
      "    find_hospital(18,'MALE',0.03)\n",
      "Expected:\n",
      "    'Southwest Hospital and Medical Center'\n",
      "Got nothing\n",
      "Trying:\n",
      "    find_hospital(48,'female',0.46)\n",
      "Expecting:\n",
      "    'Emory Dunwoody Medical Center'\n",
      "**********************************************************************\n",
      "File \"__main__\", line 13, in NoName\n",
      "Failed example:\n",
      "    find_hospital(48,'female',0.46)\n",
      "Expected:\n",
      "    'Emory Dunwoody Medical Center'\n",
      "Got nothing\n",
      "Trying:\n",
      "    find_hospital(21,'MALE',0.15)\n",
      "Expecting:\n",
      "    'Southwest Hospital and Medical Center'\n",
      "**********************************************************************\n",
      "File \"__main__\", line 16, in NoName\n",
      "Failed example:\n",
      "    find_hospital(21,'MALE',0.15)\n",
      "Expected:\n",
      "    'Southwest Hospital and Medical Center'\n",
      "Got nothing\n"
     ]
    }
   ],
   "source": [
    "import doctest\n",
    "doctest.run_docstring_examples(find_hospital, globals(),verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RDprQXlK3IL4"
   },
   "source": [
    "## Part 3: Get the address for that hospital from a JSON file\n",
    "\n",
    "Great! Now we have code to tell us which hospital to send someone to... but we don't know where that hospital is. The next function we need to create is one that looks up the address of that hospital.  All of these hospitals are in Atlanta, Georgia.  We're going to use the list from this webpage to lookup the address for that hospital, based on its name.  https://www.officialusa.com/stateguides/health/hospitals/georgia.html\n",
    "\n",
    "For your convenience, I've converted this information into a JSON document for you.  It's available for you here.  Your code should retrieve this file using the `requests` module.\n",
    "\n",
    "`https://drive.google.com/uc?export=download&id=1fIFD-NkcdiMu941N4GjyMDWxiKsFJBw-`\n",
    "\n",
    "1. You need to create a function called **get_address()** that takes hospital name as a parameter and searches the data from this JSON file for the hospital you want to find.\n",
    "2. Your code will have to load the JSON and return the correct hospital based on name.\n",
    "3. If the hospital name isn't found, the function should return None.\n",
    "4. Be sure to use good docstring documentation and includes at least 3 test cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "sJRN0Cen3IL5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finding tests in NoName\n",
      "Trying:\n",
      "    get_address('Southwest Hospital and Medical Center')\n",
      "Expecting:\n",
      "    '501 FAIRBURN ROAD SW'\n",
      "ok\n",
      "Trying:\n",
      "    get_address('BACON COUNTY HOSPITAL')\n",
      "Expecting:\n",
      "    '302 SOUTH WAYNE STREET'\n",
      "ok\n",
      "Trying:\n",
      "    get_address('Emory Dunwoody Medical Center')\n",
      "Expecting:\n",
      "    '4500 NORTH SHALLOWFORD ROAD'\n",
      "ok\n"
     ]
    }
   ],
   "source": [
    "def get_address(h_name):\n",
    "\n",
    "    '''\n",
    "\n",
    "        This function receives the name of a hospital as its input and, in response, it yields the hospital's address as its output.\n",
    "\n",
    "        >>> get_address('Southwest Hospital and Medical Center')\n",
    "        '501 FAIRBURN ROAD SW'\n",
    "\n",
    "        >>> get_address('BACON COUNTY HOSPITAL')\n",
    "        '302 SOUTH WAYNE STREET'\n",
    "\n",
    "        >>> get_address('Emory Dunwoody Medical Center')\n",
    "        '4500 NORTH SHALLOWFORD ROAD'\n",
    "\n",
    "    '''\n",
    "\n",
    "\n",
    "    try:\n",
    "\n",
    "        # Hospital name to uppercase\n",
    "        h_name = h_name.upper()\n",
    "\n",
    "        response = requests.get('https://drive.google.com/uc?export=download&id=1fIFD-NkcdiMu941N4GjyMDWxiKsFJBw-')\n",
    "\n",
    "        content = response.content\n",
    "\n",
    "        decoded_content = content.decode('utf-8')\n",
    "\n",
    "        json_addr_data = json.loads(decoded_content)\n",
    "\n",
    "        # Get the address from json\n",
    "        final_address = json_addr_data[f'{h_name}']\n",
    "\n",
    "        return (final_address['ADDRESS'])\n",
    "\n",
    "    except:\n",
    "\n",
    "        return None\n",
    "\n",
    "\n",
    "import doctest\n",
    "doctest.run_docstring_examples(get_address, globals(),verbose=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qvQVRond3IL5"
   },
   "source": [
    "## Part 4: Run the risk calculator on a population\n",
    "\n",
    "At the link below, there is a file called `people.psv`.  It is a pipe-delimited (`|`) file with columns that match the inputs for the PRIEST calculation above.  Your code should use the `requests` module to retrieve the file from this URL.\n",
    "\n",
    "`https://drive.google.com/uc?export=download&id=1fLxJN9YGUqmqExrilxSS8furwUER5HHh`\n",
    "\n",
    "\n",
    "In addition, the file has a patient identifier in the first column.\n",
    "\n",
    "1. Write a function called **process_people()** that takes the file location above as its only parameter. Your Python program should use your code above to process all of these rows, determine the hospital and address, and return a list whose items are a dictionary like this: `{ patient_number: [sex, age, breath, o2sat, heart, systolic, temp, alertness, inspired, status, hospital, address]}`.\n",
    "2. Be sure to use good docstrings, and tests in your doc strings.\n",
    "\n",
    "\n",
    "**NOTE** that when running your code for all the 100 records in the `people.psv` file, it may take a few minutes to complete.  You're making multiple calls to the internet for each record, so that can take a little while.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cxK6Vdho3IL5"
   },
   "outputs": [],
   "source": [
    "import csv\n",
    "\n",
    "def process_people(given_url):\n",
    "\n",
    "    '''\n",
    "\n",
    "        This function retrieves patient information from a specified URL, applies the previously mentioned functions to this data, and generates a dictionary containing patient specifics. Each patient is distinctly recognized by their unique number, which serves as the dictionary key.\n",
    "\n",
    "    '''\n",
    "\n",
    "    # Send a GET request\n",
    "    response = requests.get(given_url)\n",
    "\n",
    "    content = response.content\n",
    "\n",
    "    decoded_content = content.decode('utf-8')\n",
    "\n",
    "    # Split the string content into lines and remove the header row\n",
    "    l = decoded_content.split('\\n')\n",
    "\n",
    "    l.pop(0)\n",
    "\n",
    "    # Create a CSV reader to process the data\n",
    "    main_info = csv.reader(l, delimiter='|')\n",
    "\n",
    "    main_output = {}\n",
    "\n",
    "    for item in main_info:\n",
    "\n",
    "        if len(item) == 11:\n",
    "\n",
    "            id = item[0]\n",
    "            p_sex = item[1]\n",
    "            p_age = int(item[2])\n",
    "            p_resp_rate = int(item[3])\n",
    "            p_o2_sat = float(item[4])* 100\n",
    "            p_heart = int(item[5])\n",
    "            p_bp = int(item[6])\n",
    "            p_temp = float(item[7])\n",
    "            p_alert_status = item[8]\n",
    "            p_ins_o2 = item[9]\n",
    "            p_status = item[10]\n",
    "\n",
    "            priest_score = priest(p_sex, p_age, p_resp_rate, p_o2_sat, p_heart, p_bp, p_temp, p_alert_status, p_ins_o2, p_status)\n",
    "            hospital_name = find_hospital(p_age, p_sex, priest_score)\n",
    "            hospital_address = get_address(hospital_name)\n",
    "\n",
    "            main_output[id] = [p_sex, p_age, p_resp_rate, p_o2_sat/100, p_heart, p_bp, p_temp, p_alert_status, p_ins_o2, p_status, priest_score,hospital_name,hospital_address]\n",
    "\n",
    "    return main_output\n",
    "\n",
    "patient = process_people('https://drive.google.com/uc?export=download&id=1fLxJN9YGUqmqExrilxSS8furwUER5HHh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Dd0z0f0x3IL5"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ljkC7x8g3IL5"
   },
   "source": [
    "---\n",
    "\n",
    "## Check your work above\n",
    "\n",
    "If you didn't get them all correct, take a few minutes to think through those that aren't correct.\n",
    "\n",
    "\n",
    "## Submitting Your Work\n",
    "\n",
    "Submit your work as usual into a folder named `midterm`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1tZY6z_q3IL5"
   },
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
